#load_module modules/ngx_http_geoip_module.so;
#load_module modules/ngx_stream_geoip_module.so; #-->dont enable

user www;
# sets the number of worker processes to the number of cores as automatically identified by nginx at startup. # 2 * Number of CPUs
worker_processes 2;
# Changes the limit on the largest size of a core file (RLIMIT_CORE) for worker processes. Used to increase the limit without restarting the main process.
# worker_rlimit_core 20000;
# Each connection needs a filehandle (or 2 if you are proxying)
worker_rlimit_nofile 20000; 
pid /run/nginx.pid;

events {
	# worker_connections is the number of simultaneous connections
	# you are only running 1 process with 512 connections, you will only be able to serve 512 clients.
	worker_connections 8192;
	#multi_accept on;
	multi_accept on; #loitd
}

http {

	##loitd change file size
	# limit: the rate cannot exceed 10 requests per second, this limit corresponds to 1 request every 100 milliseconds
	# State information for about 16,000 IP addresses takes 1 megabyte, so our zone can store about 160,000 addresses
	limit_req_zone $binary_remote_addr zone=mylimit:10m rate=100r/s;
	# limit_req zone=mylimit burst=20 nodelay;

	#load geoIP library
	#geoip_country /usr/share/GeoIP/GeoIP.dat;
    #map $geoip_country_code $allowed_country {
    #    default yes;
    #    A1 no;
    #    VN no;
    #}
	
	# nginx core optimizations to serve files efficiently
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	
	# the keepalive on http/1.1 connections. Turn on makes error
	#keepalive_timeout 65;
	
	# internal parameter to speed up hashtable lookups
	types_hash_max_size 2048;
	
	# sends the nginx version in the server header
	server_tokens off;

	# loitd all timeout here
	keepalive_timeout 60s;
    proxy_connect_timeout  1s;
    proxy_send_timeout  1s;
    proxy_read_timeout  1s;
	# Nginx waits for the FastCGI backend: https://www.linuxbabe.com/nginx/setup-nginx-fastcgi-cache
	# levels=1:2 The first directory uses one character in its name. The sub-directory uses two characters in its name.
	fastcgi_cache_path /var/www/html/cache levels=1:2 keys_zone=phpcache:300m max_size=17g inactive=7d use_temp_path=off;
	fastcgi_cache_key "$scheme$request_method$host$request_uri";
	fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
	# timeout
    fastcgi_send_timeout 600s;
    fastcgi_read_timeout 600s;

	#fast_cgi_cache
	fastcgi_cache_bypass $skip_cache;
	fastcgi_no_cache $skip_cache;
	#enables caching, using the memory zone previously created by fastcgi_cache_path directive
	fastcgi_cache phpcache;
	#fastcgi_cache_valid 200 301 302 3650d;
	fastcgi_cache_valid 3650d; #by default above
	#when MySQL/MariaDB database server is down. 
	#Rather than relay the error to clients, Nginx can deliver the stale version of the file from its cache.
	fastcgi_cache_use_stale error timeout updating invalid_header http_500 http_503;
	fastcgi_cache_min_uses 1; #number of times an item must be requested by clients before Nginx caches it.
	fastcgi_cache_lock on;
	add_header X-FastCGI-Cache $upstream_cache_status;
	

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	# default mime type mapping (from extensions)
	include /etc/nginx/mime.types;

	# mime default if the previous mapping fails
	default_type application/octet-stream;

	##
	# SSL Settings
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;
	ssl_session_cache   shared:SSL:10m;
	ssl_session_timeout 10m;

	##
	# Logging Settings
	# awk '{printf "%8s %15s %5s\n", $3, $5, $4}' /var/log/nginx/access.log | sort | uniq -c | sort -rn
	# request_time This shows how long Nginx dealt with the request
	# upstream_response_time Gives us the time it took our upstream server (in this case Apache/mod_wsgi) to respond
	# pipe Shows ‘p’ in case the request was pipelined.
	##
	log_format cache_log '$remote_addr – $upstream_cache_status $request_method $http_host - [$time_local] – "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" '
'"$cookie_nocache" – "$arg_nocache" – "$arg_comment" – "$http_pragma" – "$http_authorization" – "$skip_cache" - $uri - [$request_time] - [$upstream_response_time] - $pipe';
	access_log /var/log/nginx/access.log cache_log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	# turns GZIP on but only for text/html mime types by default
	gzip on;
	gzip_disable "msie6";

	# Loitd
	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
	client_body_buffer_size 256k;
	client_body_in_file_only off;
	client_body_timeout 60s;
	client_header_buffer_size 64k;
	client_header_timeout  20s;
	client_max_body_size 10m;
	connection_pool_size  4096;
	##
	# Virtual Host Configs
	##
	# additional configuration
	include /etc/nginx/conf.d/*.conf;
	# Virtual Host Configs
	include /etc/nginx/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
#stream {
    #upstream mysqls {
        #zone tcp_servers 64k;
        #server 10.1.96.5:3306 weight=5 max_fails=3 fail_timeout=30s;
        #server 192.168.55.202:3308;
        #server 192.168.55.203:3308;
    #}
 
    #server {
    #    listen 8080;
    #    proxy_pass mysqls;
    #    proxy_connect_timeout 1s;
    #}
#} 
